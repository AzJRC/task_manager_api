"""initial rev

Revision ID: cf64ccba172e
Revises: 
Create Date: 2023-11-28 11:13:46.131014

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'cf64ccba172e'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('user_groups',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('user_groups_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('group_name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('group_description', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('group_creation', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('group_owner_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['group_owner_id'], ['users.id'], name='user_groups_group_owner_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='user_groups_pkey'),
    sa.UniqueConstraint('group_name', name='user_groups_group_name_key'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_user_groups_id', 'user_groups', ['id'], unique=False)
    op.create_table('user_group_members',
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('group_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('role_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['group_id'], ['user_groups.id'], name='user_group_members_group_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['role_id'], ['user_group_roles.id'], name='user_group_members_role_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='user_group_members_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('user_id', 'group_id', name='user_group_members_pkey')
    )
    op.create_table('tasks',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('tasks_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('title', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('task_creation', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('task_owner_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['task_owner_id'], ['users.id'], name='tasks_task_owner_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='tasks_pkey'),
    sa.UniqueConstraint('title', name='tasks_title_key'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_tasks_id', 'tasks', ['id'], unique=False)
    op.create_table('user_groups_task_groups',
    sa.Column('user_group_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('task_group_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['task_group_id'], ['task_groups.id'], name='user_groups_task_groups_task_group_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_group_id'], ['user_groups.id'], name='user_groups_task_groups_user_group_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('user_group_id', 'task_group_id', name='user_groups_task_groups_pkey')
    )
    op.create_table('task_groups',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('task_groups_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('group_name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('group_description', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('group_creation', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('group_owner_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['group_owner_id'], ['users.id'], name='task_groups_group_owner_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='task_groups_pkey'),
    sa.UniqueConstraint('group_name', name='task_groups_group_name_key'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_task_groups_id', 'task_groups', ['id'], unique=False)
    op.create_table('user_group_roles',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('role', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='user_group_roles_pkey')
    )
    op.create_table('users',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('users_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('username', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('password', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('user_creation', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('valid_email', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('user_state', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='users_pkey'),
    sa.UniqueConstraint('email', name='users_email_key'),
    sa.UniqueConstraint('username', name='users_username_key'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_users_id', 'users', ['id'], unique=False)
    op.create_table('task_assignments',
    sa.Column('task_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('task_group_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['task_group_id'], ['task_groups.id'], name='task_assignments_task_group_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['task_id'], ['tasks.id'], name='task_assignments_task_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('task_id', 'task_group_id', name='task_assignments_pkey')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('task_assignments')
    op.drop_index('ix_users_id', table_name='users')
    op.drop_table('users')
    op.drop_table('user_group_roles')
    op.drop_index('ix_task_groups_id', table_name='task_groups')
    op.drop_table('task_groups')
    op.drop_table('user_groups_task_groups')
    op.drop_index('ix_tasks_id', table_name='tasks')
    op.drop_table('tasks')
    op.drop_table('user_group_members')
    op.drop_index('ix_user_groups_id', table_name='user_groups')
    op.drop_table('user_groups')
    # ### end Alembic commands ###